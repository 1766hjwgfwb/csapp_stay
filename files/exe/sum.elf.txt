// unsigned long long bias;
// unsigned long long sum(unsigned long long *a, unsigned long long n) {
//    unsigned long long i, sum = 0;
//    for (i = 0; i < n; i++)
//        sum += a[i];
//    return sum + bias;
//}


// count of effective line      # effective line is sh_offset
30


// count of section headers     # use effective section
3


// begin of section headers     
// sh_name, sh_addr, sh_offset, sh_size
.text,0x0,5,22
.symtab,0x0,27,2
.rela.text,0x0,29,1


// .text section
// endbr64
push   %rbp
mov    %rsp,%rbp
mov    %rdi,-0x18(%rbp)
mov    %rsi,-0x20(%rbp)
movq   $0x0,-0x8(%rbp)
movq   $0x0,-0x10(%rbp)
jmp    41 //<sum+0x41>
mov    -0x10(%rbp),%rax
lea    0x0(,%rax,8),%rdx
mov    -0x18(%rbp),%rax
add    %rdx,%rax
mov    (%rax),%rax
add    %rax,-0x8(%rbp)
addq   $0x1,-0x10(%rbp)
mov    -0x10(%rbp),%rax
cmp    -0x20(%rbp),%rax
jb     22 // <sum+0x22>
mov    0x0(%rip),%rdx
mov    -0x8(%rbp),%rax
add    %rdx,%rax
pop    %rbp
ret


// .symtab section
// st_name, bind, type, st_shndex, st_value, st_size
// line -> size
sum,STB_GLOBAL,STT_FUNC,.text,0,22
bias,STB_GLOBAL,STT_OBJECT,COMMON,8,8



// .rel.text
// r_row, r_col, type, sym, r_addend
17,7,R_X86_64_PC32,1,-4